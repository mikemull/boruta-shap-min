name: build, test, lint

on:
  pull_request:
    branches: main
  push:
    branches: main

jobs:
  build-test:
    name: Build and test (os=${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-latest", "macos-14" ]
    defaults:
      run:
        shell: bash -el {0}

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"

    #----------------------------------------------
    #  -----  install & configure poetry  -----
    #----------------------------------------------
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        virtualenvs-path: .venv
        installer-parallel: true

    #----------------------------------------------
    #       load cached venv if cache exists
    #----------------------------------------------
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    #----------------------------------------------
    # install dependencies if cache does not exist
    #----------------------------------------------
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    #----------------------------------------------
    # install your root project, if required
    #----------------------------------------------
    - name: Install project
      run: poetry install --no-interaction
    - name: Run Ruff
      run: |
        source .venv/bin/activate
        ruff check --output-format=github boruta_shap_min/
    - name: Test with pytest
      run: |
        source .venv/bin/activate
        pytest tests/
